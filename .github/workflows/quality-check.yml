name: Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup C++ Tools
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-tidy cppcheck
        
    - name: Run clang-tidy
      run: |
        find src include -name "*.cpp" -o -name "*.hpp" | head -10 | while read file; do
          echo "Checking $file"
          clang-tidy "$file" -- -std=c++17 -Iinclude || true
        done
        
    - name: Run cppcheck
      run: |
        cppcheck --enable=all --inconclusive --std=c++17 \
          --suppress=missingIncludeSystem \
          --suppress=unmatchedSuppression \
          --suppress=unusedFunction \
          -I include src/ 2>&1 | tee cppcheck-report.txt
          
    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      with:
        name: quality-reports
        path: |
          cppcheck-report.txt
          
  dependency-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        
  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Doxygen
      run: sudo apt-get install -y doxygen graphviz
      
    - name: Generate documentation
      run: |
        cat > Doxyfile << EOF
        PROJECT_NAME = "MCP Debugger"
        PROJECT_VERSION = "1.0.0"
        INPUT = src include
        RECURSIVE = YES
        GENERATE_HTML = YES
        OUTPUT_DIRECTORY = docs
        EXTRACT_ALL = YES
        HAVE_DOT = YES
        EOF
        doxygen Doxyfile
        
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/
        
  metrics:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Count lines of code
      run: |
        echo "## Code Metrics" > metrics.md
        echo "" >> metrics.md
        
        # Count source files
        cpp_files=$(find src -name "*.cpp" | wc -l)
        hpp_files=$(find src include -name "*.hpp" | wc -l)
        total_files=$((cpp_files + hpp_files))
        
        echo "- **Source files**: $cpp_files" >> metrics.md
        echo "- **Header files**: $hpp_files" >> metrics.md
        echo "- **Total files**: $total_files" >> metrics.md
        echo "" >> metrics.md
        
        # Count lines
        total_lines=$(find src include -name "*.cpp" -o -name "*.hpp" | xargs wc -l | tail -1 | awk '{print $1}')
        code_lines=$(find src include -name "*.cpp" -o -name "*.hpp" | xargs grep -v "^[[:space:]]*$" | wc -l)
        
        echo "- **Total lines**: $total_lines" >> metrics.md
        echo "- **Code lines**: $code_lines" >> metrics.md
        echo "" >> metrics.md
        
        # Module breakdown
        echo "### Module Breakdown:" >> metrics.md
        for dir in src/*/; do
          if [ -d "$dir" ]; then
            module=$(basename "$dir")
            lines=$(find "$dir" -name "*.cpp" -o -name "*.hpp" | xargs wc -l 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
            echo "- **$module**: $lines lines" >> metrics.md
          fi
        done
        
        cat metrics.md
        
    - name: Upload metrics
      uses: actions/upload-artifact@v4
      with:
        name: code-metrics
        path: metrics.md 